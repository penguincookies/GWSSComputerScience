/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.hdsb.gwss.jmaie.u5;

/**
 *
 * @author 1yijam
 */
public class RLSSP extends javax.swing.JFrame {
    //Universal variables counting the number of wins and losses you have
    int wins, losses;
    /**
     * Creates new form RLSSP
     */
    public RLSSP() {
        //Sets Wins and Losses to 0 at Startup
        initComponents();
        wins = 0;
        losses = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        paperInput = new javax.swing.JButton();
        lizardInput = new javax.swing.JButton();
        rockInput = new javax.swing.JButton();
        spockInput = new javax.swing.JButton();
        scissorsInput = new javax.swing.JButton();
        rlsspChart = new javax.swing.JLabel();
        computerScore = new javax.swing.JLabel();
        humanScore = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        immediateResult = new javax.swing.JTextArea();
        finalResult = new javax.swing.JLabel();
        instructions = new javax.swing.JLabel();
        intructions2 = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RPSLS");
        setAlwaysOnTop(true);
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(0, 204, 102));

        paperInput.setBackground(new java.awt.Color(153, 0, 0));
        paperInput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/hdsb/gwss/jmaie/u5/paper.jpg"))); // NOI18N
        paperInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paperInputActionPerformed(evt);
            }
        });

        lizardInput.setBackground(new java.awt.Color(153, 0, 0));
        lizardInput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/hdsb/gwss/jmaie/u5/gecko.jpg"))); // NOI18N
        lizardInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lizardInputActionPerformed(evt);
            }
        });

        rockInput.setBackground(new java.awt.Color(153, 0, 0));
        rockInput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/hdsb/gwss/jmaie/u5/rock.jpg"))); // NOI18N
        rockInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rockInputActionPerformed(evt);
            }
        });

        spockInput.setBackground(new java.awt.Color(153, 0, 0));
        spockInput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/hdsb/gwss/jmaie/u5/spock.jpg"))); // NOI18N
        spockInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spockInputActionPerformed(evt);
            }
        });

        scissorsInput.setBackground(new java.awt.Color(153, 0, 0));
        scissorsInput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/hdsb/gwss/jmaie/u5/scissors.jpg"))); // NOI18N
        scissorsInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scissorsInputActionPerformed(evt);
            }
        });

        rlsspChart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/hdsb/gwss/jmaie/u5/RLSSPdiagram.jpg"))); // NOI18N

        computerScore.setText("Computer:");

        humanScore.setText("Player:");

        immediateResult.setEditable(false);
        immediateResult.setColumns(20);
        immediateResult.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 10)); // NOI18N
        immediateResult.setLineWrap(true);
        immediateResult.setRows(5);
        jScrollPane1.setViewportView(immediateResult);

        instructions.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        instructions.setForeground(new java.awt.Color(0, 51, 153));
        instructions.setText("Here you'll play rock paper scissors lizard Spock against a computer.");

        intructions2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        intructions2.setForeground(new java.awt.Color(0, 51, 153));
        intructions2.setText("Matches are best 2 out of 3");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(intructions2))
                    .addComponent(finalResult)
                    .addComponent(instructions, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(spockInput, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(paperInput, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(39, 39, 39)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lizardInput, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(humanScore, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 42, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rockInput, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(computerScore, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(scissorsInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(rlsspChart)
                .addGap(12, 12, 12))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lizardInput, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rockInput, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(paperInput, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(scissorsInput, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spockInput, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(humanScore)
                            .addComponent(computerScore))
                        .addGap(11, 11, 11)
                        .addComponent(finalResult, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(instructions, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(intructions2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(rlsspChart)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //APPLY ALL COMMENTS HERE TO OTHER INPUT EVENTS LISTED AFTER
    private void paperInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paperInputActionPerformed
    //Resets all borders to red except the one you just picked, which turns green
    rockInput.setBackground(new java.awt.Color(153, 0, 0) );
    paperInput.setBackground(new java.awt.Color(0, 153, 0) );
    scissorsInput.setBackground(new java.awt.Color(153, 0, 0) );
    lizardInput.setBackground(new java.awt.Color(153, 0, 0) );
    spockInput.setBackground(new java.awt.Color(153, 0, 0) );
    /*Generates the computer's choice.
    1 corresponts to rock
    2 to scissors
    3 to paper
    4 to lizard
    and 5 to Spock
    */
    int computerAnswer = (int)(Math.random() * 5 ) + 1;
    //Erases text in the final result box
    finalResult.setText ("");
    /*There's a case for every possible choice the computer can give
    For each case there are:
        -Adding to the wins or losses in a situation that isn't a draw
        -Setting the computer choice's border as blue(white if there's a tie)
        -Writing the result in the un-editable text area
        -Updating the scoreboard for the player and the computer
    The if and else if statements check if the player or computer has 2 wins so the game can end
    */
    switch(computerAnswer){
      case 1:
        wins++;
        rockInput.setBackground(new java.awt.Color(0, 0, 153) );
        immediateResult.setText("You played\npaper and the\ncomputer played\nrock.\nYou win!");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
      case 2:
        paperInput.setBackground(new java.awt.Color(255, 255, 255) );
        immediateResult.setText("You played\npaper and the\ncomputer played\npaper.\nYou draw.");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
      case 3:
        losses++;
        scissorsInput.setBackground(new java.awt.Color(0, 0, 153) );
        immediateResult.setText("You played\npaper and the\ncomputer played\nscissors.\nYou lose.");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
      case 4:
        losses++;
        lizardInput.setBackground(new java.awt.Color(0, 0, 153) );
        immediateResult.setText("You played\npaper and the\ncomputer played\nlizard.\nYou lose.");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
      case 5:
        wins++;
        spockInput.setBackground(new java.awt.Color(0, 0, 153) );
        immediateResult.setText("You played\npaper and the\ncomputer played\nSpock.\nYou lose.");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
        }
    if (wins == 2){
        finalResult.setText("You win this match "+wins+" to "+losses+"! To play again, press any one of the icons.");
        wins = 0;
        losses = 0;
    }
    else if (losses == 2){
        finalResult.setText("You lose this match "+wins+" to "+losses+". To play again, press any one of the icons.");
        wins = 0;
        losses = 0;
    }
    }//GEN-LAST:event_paperInputActionPerformed

    
    private void lizardInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lizardInputActionPerformed
    rockInput.setBackground(new java.awt.Color(153, 0, 0) );
    paperInput.setBackground(new java.awt.Color(153, 0, 0) );
    scissorsInput.setBackground(new java.awt.Color(153, 0, 0) );
    lizardInput.setBackground(new java.awt.Color(0, 153, 0) );
    spockInput.setBackground(new java.awt.Color(153, 0, 0) );
    int computerAnswer = (int)(Math.random() * 5 ) + 1;
    finalResult.setText ("");
    switch(computerAnswer){
      case 1:
        losses++;
        rockInput.setBackground(new java.awt.Color(0, 0, 153) );
        immediateResult.setText("You played\nlizard and the\ncomputer played\nrock.\nYou lose.");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
      case 2:
        wins++;
        paperInput.setBackground(new java.awt.Color(0, 0, 153) );
        immediateResult.setText("You played\nlizard and the\ncomputer played\npaper.\nYou win!");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
      case 3:
        losses++;
        scissorsInput.setBackground(new java.awt.Color(0, 0, 153) );
        immediateResult.setText("You played\nlizard and the\ncomputer played\nscissors.\nYou lose.");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
      case 4:
        lizardInput.setBackground(new java.awt.Color(255, 255, 255) );
        immediateResult.setText("You played\nlizard and the\ncomputer played\nlizard.\nYou draw.");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
      case 5:
        wins++;
        spockInput.setBackground(new java.awt.Color(0, 0, 153) );
        immediateResult.setText("You played\nlizard and the\ncomputer played\nSpock.\nYou win!");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
        }
    if (wins == 2){
        finalResult.setText("You win this match "+wins+" to "+losses+"! To play again, press any one of the icons.");
        wins = 0;
        losses = 0;
    }
    else if (losses == 2){
        finalResult.setText("You lose this match "+wins+" to "+losses+". To play again, press any one of the icons.");
        wins = 0;
        losses = 0;
    }
    }//GEN-LAST:event_lizardInputActionPerformed
    
    private void rockInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rockInputActionPerformed
    rockInput.setBackground(new java.awt.Color(0, 153, 0) );
    paperInput.setBackground(new java.awt.Color(153, 0, 0) );
    scissorsInput.setBackground(new java.awt.Color(153, 0, 0) );
    lizardInput.setBackground(new java.awt.Color(153, 0, 0) );
    spockInput.setBackground(new java.awt.Color(153, 0, 0) );
    int computerAnswer = (int)(Math.random() * 5 ) + 1;
    finalResult.setText ("");
    switch(computerAnswer){
      case 1:
        rockInput.setBackground(new java.awt.Color(255, 255, 255) );
        immediateResult.setText("You played rock and the\ncomputer played\nrock.\nYou draw.");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
      case 2:
        losses++;
        paperInput.setBackground(new java.awt.Color(0, 0, 153) );
        immediateResult.setText("You played rock and the\ncomputer played\npaper.\nYou lose.");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
      case 3:
        wins++;
        scissorsInput.setBackground(new java.awt.Color(0, 0, 153) );
        immediateResult.setText("You played rock and the\ncomputer played\nscissors.\nYou win!");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
      case 4:
        wins++;
        lizardInput.setBackground(new java.awt.Color(0, 0, 153) );
        immediateResult.setText("You played rock and the\ncomputer played\nlizard.\nYou win!");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
      case 5:
        losses++;
        spockInput.setBackground(new java.awt.Color(0, 0, 153) );
        immediateResult.setText("You played rock and the\ncomputer played\nSpock.\nYou lose.");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
        }
    if (wins == 2){
        finalResult.setText("You win this match "+wins+" to "+losses+"! To play again, press any one of the icons.");
        wins = 0;
        losses = 0;
    }
    else if (losses == 2){
        finalResult.setText("You lose this match "+wins+" to "+losses+". To play again, press any one of the icons.");
        wins = 0;
        losses = 0;
    }
    }//GEN-LAST:event_rockInputActionPerformed
    
    private void spockInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spockInputActionPerformed
    rockInput.setBackground(new java.awt.Color(153, 0, 0) );
    paperInput.setBackground(new java.awt.Color(153, 0, 0) );
    scissorsInput.setBackground(new java.awt.Color(153, 0, 0) );
    lizardInput.setBackground(new java.awt.Color(153, 0, 0) );
    spockInput.setBackground(new java.awt.Color(0, 153, 0) );
    int computerAnswer = (int)(Math.random() * 5 ) + 1;
    finalResult.setText ("");
    switch(computerAnswer){
      case 1:
        wins++;
        rockInput.setBackground(new java.awt.Color(0, 0, 153) );
        immediateResult.setText("You played\nSpock and the\ncomputer played\nrock.\nYou win!");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
      case 2:
        losses++;
        paperInput.setBackground(new java.awt.Color(0, 0, 153) );
        immediateResult.setText("You played\nSpock and the\ncomputer played\npaper.\nYou lose.");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
      case 3:
        wins++;
        scissorsInput.setBackground(new java.awt.Color(0, 0, 153) );
        immediateResult.setText("You played\nSpock and the\ncomputer played\nscissors.\nYou win!");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
      case 4:
        losses++;
        lizardInput.setBackground(new java.awt.Color(0, 0, 153) );
        immediateResult.setText("You played\nSpock and the\ncomputer played\nlizard.\nYou lose.");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
      case 5:
        spockInput.setBackground(new java.awt.Color(255, 255, 255) );
        immediateResult.setText("You played\nSpock and the\ncomputer played\nSpock.\nYou draw.");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
        }
    if (wins == 2){
        finalResult.setText("You win this match "+wins+" to "+losses+"! To play again, press any one of the icons.");
        wins = 0;
        losses = 0;
    }
    else if (losses == 2){
        finalResult.setText("You lose this match "+wins+" to "+losses+". To play again, press any one of the icons.");
        wins = 0;
        losses = 0;
    }
    }//GEN-LAST:event_spockInputActionPerformed
 
    private void scissorsInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scissorsInputActionPerformed
    rockInput.setBackground(new java.awt.Color(153, 0, 0) );
    paperInput.setBackground(new java.awt.Color(153, 0, 0) );
    scissorsInput.setBackground(new java.awt.Color(0, 153, 0) );
    lizardInput.setBackground(new java.awt.Color(153, 0, 0) );
    spockInput.setBackground(new java.awt.Color(153, 0, 0) );
    int computerAnswer = (int)(Math.random() * 5 ) + 1;
    finalResult.setText ("");
    switch(computerAnswer){
      case 1:
        losses++;
        rockInput.setBackground(new java.awt.Color(0, 0, 153) );
        immediateResult.setText("You played\nscissors and the computer played\nrock.\nYou lose");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
      case 2:
        wins++;
        paperInput.setBackground(new java.awt.Color(0, 0, 153) );
        immediateResult.setText("You played\nscissors and the computer played\npaper.\nYou win!");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
      case 3:
        scissorsInput.setBackground(new java.awt.Color(255, 255, 255) );
        immediateResult.setText("You played\nscissors and the computer played\nscissors.\nYou draw.");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
      case 4:
        wins++;
        lizardInput.setBackground(new java.awt.Color(0, 0, 153) );
        immediateResult.setText("You played\nscissors and the computer played\nlizard.\nYou win!");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
      case 5:
        losses++;
        spockInput.setBackground(new java.awt.Color(0, 0, 153) );
        immediateResult.setText("You played\nscissors and the computer played\nSpock.\nYou lose.");
        humanScore.setText("Player: "+wins+"");
        computerScore.setText("Computer: "+losses+"");
        break;
        }
    if (wins == 2){
        finalResult.setText("You win this match "+wins+" to "+losses+"! To play again, press any one of the icons.");
        wins = 0;
        losses = 0;
    }
    else if (losses == 2){
        finalResult.setText("You lose this match "+wins+" to "+losses+". To play again, press any one of the icons.");
        wins = 0;
        losses = 0;
    }
    }//GEN-LAST:event_scissorsInputActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RLSSP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RLSSP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RLSSP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RLSSP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RLSSP().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel computerScore;
    private javax.swing.JLabel finalResult;
    private javax.swing.JLabel humanScore;
    private javax.swing.JTextArea immediateResult;
    private javax.swing.JLabel instructions;
    private javax.swing.JLabel intructions2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton lizardInput;
    private javax.swing.JButton paperInput;
    private javax.swing.JLabel rlsspChart;
    private javax.swing.JButton rockInput;
    private javax.swing.JButton scissorsInput;
    private javax.swing.JButton spockInput;
    // End of variables declaration//GEN-END:variables

   
}
